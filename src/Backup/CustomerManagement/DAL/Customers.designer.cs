#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CustomerManagement.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Customers")]
	public partial class CustomersDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPaymentType(PaymentType instance);
    partial void UpdatePaymentType(PaymentType instance);
    partial void DeletePaymentType(PaymentType instance);
    partial void InsertPaymentTransaction(PaymentTransaction instance);
    partial void UpdatePaymentTransaction(PaymentTransaction instance);
    partial void DeletePaymentTransaction(PaymentTransaction instance);
    partial void InsertPaymentStatusCode(PaymentStatusCode instance);
    partial void UpdatePaymentStatusCode(PaymentStatusCode instance);
    partial void DeletePaymentStatusCode(PaymentStatusCode instance);
    partial void InsertPaymentHeader(PaymentHeader instance);
    partial void UpdatePaymentHeader(PaymentHeader instance);
    partial void DeletePaymentHeader(PaymentHeader instance);
    partial void InsertItemPricing(ItemPricing instance);
    partial void UpdateItemPricing(ItemPricing instance);
    partial void DeleteItemPricing(ItemPricing instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertInvoiceHeader(InvoiceHeader instance);
    partial void UpdateInvoiceHeader(InvoiceHeader instance);
    partial void DeleteInvoiceHeader(InvoiceHeader instance);
    partial void InsertInvoiceDetail(InvoiceDetail instance);
    partial void UpdateInvoiceDetail(InvoiceDetail instance);
    partial void DeleteInvoiceDetail(InvoiceDetail instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    partial void InsertPhone(Phone instance);
    partial void UpdatePhone(Phone instance);
    partial void DeletePhone(Phone instance);
    partial void InsertAddressType(AddressType instance);
    partial void UpdateAddressType(AddressType instance);
    partial void DeleteAddressType(AddressType instance);
    partial void InsertCustomerType(CustomerType instance);
    partial void UpdateCustomerType(CustomerType instance);
    partial void DeleteCustomerType(CustomerType instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    #endregion
		
		public CustomersDataContext() : 
				base(global::CustomerManagement.Properties.Settings.Default.CustomersConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CustomersDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomersDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomersDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CustomersDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<PaymentType> PaymentTypes
		{
			get
			{
				return this.GetTable<PaymentType>();
			}
		}
		
		public System.Data.Linq.Table<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this.GetTable<PaymentTransaction>();
			}
		}
		
		public System.Data.Linq.Table<PaymentStatusCode> PaymentStatusCodes
		{
			get
			{
				return this.GetTable<PaymentStatusCode>();
			}
		}
		
		public System.Data.Linq.Table<PaymentHeader> PaymentHeaders
		{
			get
			{
				return this.GetTable<PaymentHeader>();
			}
		}
		
		public System.Data.Linq.Table<ItemPricing> ItemPricings
		{
			get
			{
				return this.GetTable<ItemPricing>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceHeader> InvoiceHeaders
		{
			get
			{
				return this.GetTable<InvoiceHeader>();
			}
		}
		
		public System.Data.Linq.Table<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this.GetTable<InvoiceDetail>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		public System.Data.Linq.Table<Phone> Phones
		{
			get
			{
				return this.GetTable<Phone>();
			}
		}
		
		public System.Data.Linq.Table<AddressType> AddressTypes
		{
			get
			{
				return this.GetTable<AddressType>();
			}
		}
		
		public System.Data.Linq.Table<CustomerType> CustomerTypes
		{
			get
			{
				return this.GetTable<CustomerType>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
	}
	
	[Table(Name="dbo.PaymentType")]
	public partial class PaymentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CardType;
		
		private string _Glacctno;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCardTypeChanging(string value);
    partial void OnCardTypeChanged();
    partial void OnGlacctnoChanging(string value);
    partial void OnGlacctnoChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public PaymentType()
		{
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CardType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string CardType
		{
			get
			{
				return this._CardType;
			}
			set
			{
				if ((this._CardType != value))
				{
					this.OnCardTypeChanging(value);
					this.SendPropertyChanging();
					this._CardType = value;
					this.SendPropertyChanged("CardType");
					this.OnCardTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Glacctno", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Glacctno
		{
			get
			{
				return this._Glacctno;
			}
			set
			{
				if ((this._Glacctno != value))
				{
					this.OnGlacctnoChanging(value);
					this.SendPropertyChanging();
					this._Glacctno = value;
					this.SendPropertyChanged("Glacctno");
					this.OnGlacctnoChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="PaymentType_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="PaymentTypeId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentType = null;
		}
	}
	
	[Table(Name="dbo.PaymentTransaction")]
	public partial class PaymentTransaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PaymentTypeId;
		
		private int _PaymentHeaderId;
		
		private decimal _Amount;
		
		private string _AuthCode;
		
		private int _StatusCode;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<PaymentStatusCode> _PaymentStatusCodes;
		
		private EntityRef<PaymentType> _PaymentType;
		
		private EntityRef<PaymentHeader> _PaymentHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPaymentTypeIdChanging(int value);
    partial void OnPaymentTypeIdChanged();
    partial void OnPaymentHeaderIdChanging(int value);
    partial void OnPaymentHeaderIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAuthCodeChanging(string value);
    partial void OnAuthCodeChanged();
    partial void OnStatusCodeChanging(int value);
    partial void OnStatusCodeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public PaymentTransaction()
		{
			this._PaymentStatusCodes = new EntitySet<PaymentStatusCode>(new Action<PaymentStatusCode>(this.attach_PaymentStatusCodes), new Action<PaymentStatusCode>(this.detach_PaymentStatusCodes));
			this._PaymentType = default(EntityRef<PaymentType>);
			this._PaymentHeader = default(EntityRef<PaymentHeader>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentTypeId", DbType="Int NOT NULL")]
		public int PaymentTypeId
		{
			get
			{
				return this._PaymentTypeId;
			}
			set
			{
				if ((this._PaymentTypeId != value))
				{
					if (this._PaymentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTypeId = value;
					this.SendPropertyChanged("PaymentTypeId");
					this.OnPaymentTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentHeaderId", DbType="Int NOT NULL")]
		public int PaymentHeaderId
		{
			get
			{
				return this._PaymentHeaderId;
			}
			set
			{
				if ((this._PaymentHeaderId != value))
				{
					if (this._PaymentHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentHeaderId = value;
					this.SendPropertyChanged("PaymentHeaderId");
					this.OnPaymentHeaderIdChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_AuthCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string AuthCode
		{
			get
			{
				return this._AuthCode;
			}
			set
			{
				if ((this._AuthCode != value))
				{
					this.OnAuthCodeChanging(value);
					this.SendPropertyChanging();
					this._AuthCode = value;
					this.SendPropertyChanged("AuthCode");
					this.OnAuthCodeChanged();
				}
			}
		}
		
		[Column(Storage="_StatusCode", DbType="Int NOT NULL")]
		public int StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="PaymentTransaction_PaymentStatusCode", Storage="_PaymentStatusCodes", ThisKey="Id", OtherKey="PaymentTransactionId")]
		public EntitySet<PaymentStatusCode> PaymentStatusCodes
		{
			get
			{
				return this._PaymentStatusCodes;
			}
			set
			{
				this._PaymentStatusCodes.Assign(value);
			}
		}
		
		[Association(Name="PaymentType_PaymentTransaction", Storage="_PaymentType", ThisKey="PaymentTypeId", OtherKey="Id", IsForeignKey=true)]
		public PaymentType PaymentType
		{
			get
			{
				return this._PaymentType.Entity;
			}
			set
			{
				PaymentType previousValue = this._PaymentType.Entity;
				if (((previousValue != value) 
							|| (this._PaymentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentType.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._PaymentType.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._PaymentTypeId = value.Id;
					}
					else
					{
						this._PaymentTypeId = default(int);
					}
					this.SendPropertyChanged("PaymentType");
				}
			}
		}
		
		[Association(Name="PaymentHeader_PaymentTransaction", Storage="_PaymentHeader", ThisKey="PaymentHeaderId", OtherKey="Id", IsForeignKey=true)]
		public PaymentHeader PaymentHeader
		{
			get
			{
				return this._PaymentHeader.Entity;
			}
			set
			{
				PaymentHeader previousValue = this._PaymentHeader.Entity;
				if (((previousValue != value) 
							|| (this._PaymentHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentHeader.Entity = null;
						previousValue.PaymentTransactions.Remove(this);
					}
					this._PaymentHeader.Entity = value;
					if ((value != null))
					{
						value.PaymentTransactions.Add(this);
						this._PaymentHeaderId = value.Id;
					}
					else
					{
						this._PaymentHeaderId = default(int);
					}
					this.SendPropertyChanged("PaymentHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentStatusCodes(PaymentStatusCode entity)
		{
			this.SendPropertyChanging();
			entity.PaymentTransaction = this;
		}
		
		private void detach_PaymentStatusCodes(PaymentStatusCode entity)
		{
			this.SendPropertyChanging();
			entity.PaymentTransaction = null;
		}
	}
	
	[Table(Name="dbo.PaymentStatusCode")]
	public partial class PaymentStatusCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _PaymentTransactionId;
		
		private string _StatusCode;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntityRef<PaymentTransaction> _PaymentTransaction;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPaymentTransactionIdChanging(int value);
    partial void OnPaymentTransactionIdChanged();
    partial void OnStatusCodeChanging(string value);
    partial void OnStatusCodeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public PaymentStatusCode()
		{
			this._PaymentTransaction = default(EntityRef<PaymentTransaction>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentTransactionId", DbType="Int NOT NULL")]
		public int PaymentTransactionId
		{
			get
			{
				return this._PaymentTransactionId;
			}
			set
			{
				if ((this._PaymentTransactionId != value))
				{
					if (this._PaymentTransaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentTransactionId = value;
					this.SendPropertyChanged("PaymentTransactionId");
					this.OnPaymentTransactionIdChanged();
				}
			}
		}
		
		[Column(Storage="_StatusCode", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string StatusCode
		{
			get
			{
				return this._StatusCode;
			}
			set
			{
				if ((this._StatusCode != value))
				{
					this.OnStatusCodeChanging(value);
					this.SendPropertyChanging();
					this._StatusCode = value;
					this.SendPropertyChanged("StatusCode");
					this.OnStatusCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="PaymentTransaction_PaymentStatusCode", Storage="_PaymentTransaction", ThisKey="PaymentTransactionId", OtherKey="Id", IsForeignKey=true)]
		public PaymentTransaction PaymentTransaction
		{
			get
			{
				return this._PaymentTransaction.Entity;
			}
			set
			{
				PaymentTransaction previousValue = this._PaymentTransaction.Entity;
				if (((previousValue != value) 
							|| (this._PaymentTransaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentTransaction.Entity = null;
						previousValue.PaymentStatusCodes.Remove(this);
					}
					this._PaymentTransaction.Entity = value;
					if ((value != null))
					{
						value.PaymentStatusCodes.Add(this);
						this._PaymentTransactionId = value.Id;
					}
					else
					{
						this._PaymentTransactionId = default(int);
					}
					this.SendPropertyChanged("PaymentTransaction");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PaymentHeader")]
	public partial class PaymentHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _InvoiceHeaderId;
		
		private short _LastFourDigitsOfCreditCard;
		
		private byte _ExpirationMonth;
		
		private short _ExpirationYear;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<PaymentTransaction> _PaymentTransactions;
		
		private EntityRef<InvoiceHeader> _InvoiceHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInvoiceHeaderIdChanging(int value);
    partial void OnInvoiceHeaderIdChanged();
    partial void OnLastFourDigitsOfCreditCardChanging(short value);
    partial void OnLastFourDigitsOfCreditCardChanged();
    partial void OnExpirationMonthChanging(byte value);
    partial void OnExpirationMonthChanged();
    partial void OnExpirationYearChanging(short value);
    partial void OnExpirationYearChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public PaymentHeader()
		{
			this._PaymentTransactions = new EntitySet<PaymentTransaction>(new Action<PaymentTransaction>(this.attach_PaymentTransactions), new Action<PaymentTransaction>(this.detach_PaymentTransactions));
			this._InvoiceHeader = default(EntityRef<InvoiceHeader>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceHeaderId", DbType="Int NOT NULL")]
		public int InvoiceHeaderId
		{
			get
			{
				return this._InvoiceHeaderId;
			}
			set
			{
				if ((this._InvoiceHeaderId != value))
				{
					if (this._InvoiceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceHeaderId = value;
					this.SendPropertyChanged("InvoiceHeaderId");
					this.OnInvoiceHeaderIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastFourDigitsOfCreditCard", DbType="SmallInt NOT NULL")]
		public short LastFourDigitsOfCreditCard
		{
			get
			{
				return this._LastFourDigitsOfCreditCard;
			}
			set
			{
				if ((this._LastFourDigitsOfCreditCard != value))
				{
					this.OnLastFourDigitsOfCreditCardChanging(value);
					this.SendPropertyChanging();
					this._LastFourDigitsOfCreditCard = value;
					this.SendPropertyChanged("LastFourDigitsOfCreditCard");
					this.OnLastFourDigitsOfCreditCardChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationMonth", DbType="TinyInt NOT NULL")]
		public byte ExpirationMonth
		{
			get
			{
				return this._ExpirationMonth;
			}
			set
			{
				if ((this._ExpirationMonth != value))
				{
					this.OnExpirationMonthChanging(value);
					this.SendPropertyChanging();
					this._ExpirationMonth = value;
					this.SendPropertyChanged("ExpirationMonth");
					this.OnExpirationMonthChanged();
				}
			}
		}
		
		[Column(Storage="_ExpirationYear", DbType="SmallInt NOT NULL")]
		public short ExpirationYear
		{
			get
			{
				return this._ExpirationYear;
			}
			set
			{
				if ((this._ExpirationYear != value))
				{
					this.OnExpirationYearChanging(value);
					this.SendPropertyChanging();
					this._ExpirationYear = value;
					this.SendPropertyChanged("ExpirationYear");
					this.OnExpirationYearChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="PaymentHeader_PaymentTransaction", Storage="_PaymentTransactions", ThisKey="Id", OtherKey="PaymentHeaderId")]
		public EntitySet<PaymentTransaction> PaymentTransactions
		{
			get
			{
				return this._PaymentTransactions;
			}
			set
			{
				this._PaymentTransactions.Assign(value);
			}
		}
		
		[Association(Name="InvoiceHeader_PaymentHeader", Storage="_InvoiceHeader", ThisKey="InvoiceHeaderId", OtherKey="Id", IsForeignKey=true)]
		public InvoiceHeader InvoiceHeader
		{
			get
			{
				return this._InvoiceHeader.Entity;
			}
			set
			{
				InvoiceHeader previousValue = this._InvoiceHeader.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceHeader.Entity = null;
						previousValue.PaymentHeaders.Remove(this);
					}
					this._InvoiceHeader.Entity = value;
					if ((value != null))
					{
						value.PaymentHeaders.Add(this);
						this._InvoiceHeaderId = value.Id;
					}
					else
					{
						this._InvoiceHeaderId = default(int);
					}
					this.SendPropertyChanged("InvoiceHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentHeader = this;
		}
		
		private void detach_PaymentTransactions(PaymentTransaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentHeader = null;
		}
	}
	
	[Table(Name="dbo.ItemPricing")]
	public partial class ItemPricing : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ItemId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _OverrideGlacctno;
		
		private decimal _UnitPrice;
		
		private string _Description;
		
		private string _PromoCode;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnOverrideGlacctnoChanging(string value);
    partial void OnOverrideGlacctnoChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPromoCodeChanging(string value);
    partial void OnPromoCodeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public ItemPricing()
		{
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ItemId", DbType="Int NOT NULL")]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_OverrideGlacctno", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string OverrideGlacctno
		{
			get
			{
				return this._OverrideGlacctno;
			}
			set
			{
				if ((this._OverrideGlacctno != value))
				{
					this.OnOverrideGlacctnoChanging(value);
					this.SendPropertyChanging();
					this._OverrideGlacctno = value;
					this.SendPropertyChanged("OverrideGlacctno");
					this.OnOverrideGlacctnoChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Money NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_PromoCode", DbType="NVarChar(10)")]
		public string PromoCode
		{
			get
			{
				return this._PromoCode;
			}
			set
			{
				if ((this._PromoCode != value))
				{
					this.OnPromoCodeChanging(value);
					this.SendPropertyChanging();
					this._PromoCode = value;
					this.SendPropertyChanged("PromoCode");
					this.OnPromoCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="ItemPricing_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="Id", OtherKey="ItemPricingId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[Association(Name="Item_ItemPricing", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.ItemPricings.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.ItemPricings.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemPricing = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.ItemPricing = null;
		}
	}
	
	[Table(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Glacctno;
		
		private int _SubscriptionDays;
		
		private string _ItemClass;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<ItemPricing> _ItemPricings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGlacctnoChanging(string value);
    partial void OnGlacctnoChanged();
    partial void OnSubscriptionDaysChanging(int value);
    partial void OnSubscriptionDaysChanged();
    partial void OnItemClassChanging(string value);
    partial void OnItemClassChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Item()
		{
			this._ItemPricings = new EntitySet<ItemPricing>(new Action<ItemPricing>(this.attach_ItemPricings), new Action<ItemPricing>(this.detach_ItemPricings));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Glacctno", DbType="VarChar(128) NOT NULL", CanBeNull=false)]
		public string Glacctno
		{
			get
			{
				return this._Glacctno;
			}
			set
			{
				if ((this._Glacctno != value))
				{
					this.OnGlacctnoChanging(value);
					this.SendPropertyChanging();
					this._Glacctno = value;
					this.SendPropertyChanged("Glacctno");
					this.OnGlacctnoChanged();
				}
			}
		}
		
		[Column(Storage="_SubscriptionDays", DbType="Int NOT NULL")]
		public int SubscriptionDays
		{
			get
			{
				return this._SubscriptionDays;
			}
			set
			{
				if ((this._SubscriptionDays != value))
				{
					this.OnSubscriptionDaysChanging(value);
					this.SendPropertyChanging();
					this._SubscriptionDays = value;
					this.SendPropertyChanged("SubscriptionDays");
					this.OnSubscriptionDaysChanged();
				}
			}
		}
		
		[Column(Storage="_ItemClass", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string ItemClass
		{
			get
			{
				return this._ItemClass;
			}
			set
			{
				if ((this._ItemClass != value))
				{
					this.OnItemClassChanging(value);
					this.SendPropertyChanging();
					this._ItemClass = value;
					this.SendPropertyChanged("ItemClass");
					this.OnItemClassChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="Item_ItemPricing", Storage="_ItemPricings", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<ItemPricing> ItemPricings
		{
			get
			{
				return this._ItemPricings;
			}
			set
			{
				this._ItemPricings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemPricings(ItemPricing entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_ItemPricings(ItemPricing entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[Table(Name="dbo.InvoiceHeader")]
	public partial class InvoiceHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private string _InvoiceType;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<PaymentHeader> _PaymentHeaders;
		
		private EntitySet<InvoiceDetail> _InvoiceDetails;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnInvoiceTypeChanging(string value);
    partial void OnInvoiceTypeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public InvoiceHeader()
		{
			this._PaymentHeaders = new EntitySet<PaymentHeader>(new Action<PaymentHeader>(this.attach_PaymentHeaders), new Action<PaymentHeader>(this.detach_PaymentHeaders));
			this._InvoiceDetails = new EntitySet<InvoiceDetail>(new Action<InvoiceDetail>(this.attach_InvoiceDetails), new Action<InvoiceDetail>(this.detach_InvoiceDetails));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceType", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string InvoiceType
		{
			get
			{
				return this._InvoiceType;
			}
			set
			{
				if ((this._InvoiceType != value))
				{
					this.OnInvoiceTypeChanging(value);
					this.SendPropertyChanging();
					this._InvoiceType = value;
					this.SendPropertyChanged("InvoiceType");
					this.OnInvoiceTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="InvoiceHeader_PaymentHeader", Storage="_PaymentHeaders", ThisKey="Id", OtherKey="InvoiceHeaderId")]
		public EntitySet<PaymentHeader> PaymentHeaders
		{
			get
			{
				return this._PaymentHeaders;
			}
			set
			{
				this._PaymentHeaders.Assign(value);
			}
		}
		
		[Association(Name="InvoiceHeader_InvoiceDetail", Storage="_InvoiceDetails", ThisKey="Id", OtherKey="InvoiceHeaderId")]
		public EntitySet<InvoiceDetail> InvoiceDetails
		{
			get
			{
				return this._InvoiceDetails;
			}
			set
			{
				this._InvoiceDetails.Assign(value);
			}
		}
		
		[Association(Name="Customer_InvoiceHeader", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.InvoiceHeaders.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.InvoiceHeaders.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PaymentHeaders(PaymentHeader entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceHeader = this;
		}
		
		private void detach_PaymentHeaders(PaymentHeader entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceHeader = null;
		}
		
		private void attach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceHeader = this;
		}
		
		private void detach_InvoiceDetails(InvoiceDetail entity)
		{
			this.SendPropertyChanging();
			entity.InvoiceHeader = null;
		}
	}
	
	[Table(Name="dbo.InvoiceDetail")]
	public partial class InvoiceDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _InvoiceHeaderId;
		
		private int _ItemPricingId;
		
		private int _ItemUnits;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntityRef<InvoiceHeader> _InvoiceHeader;
		
		private EntityRef<ItemPricing> _ItemPricing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInvoiceHeaderIdChanging(int value);
    partial void OnInvoiceHeaderIdChanged();
    partial void OnItemPricingIdChanging(int value);
    partial void OnItemPricingIdChanged();
    partial void OnItemUnitsChanging(int value);
    partial void OnItemUnitsChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public InvoiceDetail()
		{
			this._InvoiceHeader = default(EntityRef<InvoiceHeader>);
			this._ItemPricing = default(EntityRef<ItemPricing>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_InvoiceHeaderId", DbType="Int NOT NULL")]
		public int InvoiceHeaderId
		{
			get
			{
				return this._InvoiceHeaderId;
			}
			set
			{
				if ((this._InvoiceHeaderId != value))
				{
					if (this._InvoiceHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInvoiceHeaderIdChanging(value);
					this.SendPropertyChanging();
					this._InvoiceHeaderId = value;
					this.SendPropertyChanged("InvoiceHeaderId");
					this.OnInvoiceHeaderIdChanged();
				}
			}
		}
		
		[Column(Storage="_ItemPricingId", DbType="Int NOT NULL")]
		public int ItemPricingId
		{
			get
			{
				return this._ItemPricingId;
			}
			set
			{
				if ((this._ItemPricingId != value))
				{
					if (this._ItemPricing.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemPricingIdChanging(value);
					this.SendPropertyChanging();
					this._ItemPricingId = value;
					this.SendPropertyChanged("ItemPricingId");
					this.OnItemPricingIdChanged();
				}
			}
		}
		
		[Column(Storage="_ItemUnits", DbType="Int NOT NULL")]
		public int ItemUnits
		{
			get
			{
				return this._ItemUnits;
			}
			set
			{
				if ((this._ItemUnits != value))
				{
					this.OnItemUnitsChanging(value);
					this.SendPropertyChanging();
					this._ItemUnits = value;
					this.SendPropertyChanged("ItemUnits");
					this.OnItemUnitsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="InvoiceHeader_InvoiceDetail", Storage="_InvoiceHeader", ThisKey="InvoiceHeaderId", OtherKey="Id", IsForeignKey=true)]
		public InvoiceHeader InvoiceHeader
		{
			get
			{
				return this._InvoiceHeader.Entity;
			}
			set
			{
				InvoiceHeader previousValue = this._InvoiceHeader.Entity;
				if (((previousValue != value) 
							|| (this._InvoiceHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InvoiceHeader.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._InvoiceHeader.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._InvoiceHeaderId = value.Id;
					}
					else
					{
						this._InvoiceHeaderId = default(int);
					}
					this.SendPropertyChanged("InvoiceHeader");
				}
			}
		}
		
		[Association(Name="ItemPricing_InvoiceDetail", Storage="_ItemPricing", ThisKey="ItemPricingId", OtherKey="Id", IsForeignKey=true)]
		public ItemPricing ItemPricing
		{
			get
			{
				return this._ItemPricing.Entity;
			}
			set
			{
				ItemPricing previousValue = this._ItemPricing.Entity;
				if (((previousValue != value) 
							|| (this._ItemPricing.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemPricing.Entity = null;
						previousValue.InvoiceDetails.Remove(this);
					}
					this._ItemPricing.Entity = value;
					if ((value != null))
					{
						value.InvoiceDetails.Add(this);
						this._ItemPricingId = value.Id;
					}
					else
					{
						this._ItemPricingId = default(int);
					}
					this.SendPropertyChanged("ItemPricing");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PhoneType")]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<Phone> _Phones;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public PhoneType()
		{
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="PhoneType_Phone", Storage="_Phones", ThisKey="Id", OtherKey="PhoneTypeId")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
	}
	
	[Table(Name="dbo.Phone")]
	public partial class Phone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private int _PhoneTypeId;
		
		private string _CountryCallingCode;
		
		private string _Number;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntityRef<PhoneType> _PhoneType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnPhoneTypeIdChanging(int value);
    partial void OnPhoneTypeIdChanged();
    partial void OnCountryCallingCodeChanging(string value);
    partial void OnCountryCallingCodeChanged();
    partial void OnNumberChanging(string value);
    partial void OnNumberChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Phone()
		{
			this._PhoneType = default(EntityRef<PhoneType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeId", DbType="Int NOT NULL")]
		public int PhoneTypeId
		{
			get
			{
				return this._PhoneTypeId;
			}
			set
			{
				if ((this._PhoneTypeId != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeId = value;
					this.SendPropertyChanged("PhoneTypeId");
					this.OnPhoneTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCallingCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string CountryCallingCode
		{
			get
			{
				return this._CountryCallingCode;
			}
			set
			{
				if ((this._CountryCallingCode != value))
				{
					this.OnCountryCallingCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCallingCode = value;
					this.SendPropertyChanged("CountryCallingCode");
					this.OnCountryCallingCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Number", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="PhoneType_Phone", Storage="_PhoneType", ThisKey="PhoneTypeId", OtherKey="Id", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._PhoneTypeId = value.Id;
					}
					else
					{
						this._PhoneTypeId = default(int);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		[Association(Name="Customer_Phone", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Phones.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Phones.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AddressType")]
	public partial class AddressType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<Address> _Addresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public AddressType()
		{
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_Addresses", ThisKey="Id", OtherKey="AddressTypeId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.AddressType = null;
		}
	}
	
	[Table(Name="dbo.CustomerType")]
	public partial class CustomerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _TypeName;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public CustomerType()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="CustomerType_Customer", Storage="_Customers", ThisKey="Id", OtherKey="CustomerTypeId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.CustomerType = null;
		}
	}
	
	[Table(Name="dbo.Login")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private string _FrontDoor;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnFrontDoorChanging(string value);
    partial void OnFrontDoorChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Login()
		{
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_FrontDoor", DbType="NVarChar(256)")]
		public string FrontDoor
		{
			get
			{
				return this._FrontDoor;
			}
			set
			{
				if ((this._FrontDoor != value))
				{
					this.OnFrontDoorChanging(value);
					this.SendPropertyChanging();
					this._FrontDoor = value;
					this.SendPropertyChanged("FrontDoor");
					this.OnFrontDoorChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="Customer_Login", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _MiddleName;
		
		private string _LastName;
		
		private int _CustomerTypeId;
		
		private decimal _Balance;
		
		private int _UserId;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntitySet<InvoiceHeader> _InvoiceHeaders;
		
		private EntitySet<Phone> _Phones;
		
		private EntitySet<Login> _Logins;
		
		private EntitySet<Address> _Addresses;
		
		private EntityRef<CustomerType> _CustomerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnMiddleNameChanging(string value);
    partial void OnMiddleNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnCustomerTypeIdChanging(int value);
    partial void OnCustomerTypeIdChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Customer()
		{
			this._InvoiceHeaders = new EntitySet<InvoiceHeader>(new Action<InvoiceHeader>(this.attach_InvoiceHeaders), new Action<InvoiceHeader>(this.detach_InvoiceHeaders));
			this._Phones = new EntitySet<Phone>(new Action<Phone>(this.attach_Phones), new Action<Phone>(this.detach_Phones));
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			this._Addresses = new EntitySet<Address>(new Action<Address>(this.attach_Addresses), new Action<Address>(this.detach_Addresses));
			this._CustomerType = default(EntityRef<CustomerType>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_MiddleName", DbType="NVarChar(50)")]
		public string MiddleName
		{
			get
			{
				return this._MiddleName;
			}
			set
			{
				if ((this._MiddleName != value))
				{
					this.OnMiddleNameChanging(value);
					this.SendPropertyChanging();
					this._MiddleName = value;
					this.SendPropertyChanged("MiddleName");
					this.OnMiddleNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerTypeId", DbType="Int NOT NULL")]
		public int CustomerTypeId
		{
			get
			{
				return this._CustomerTypeId;
			}
			set
			{
				if ((this._CustomerTypeId != value))
				{
					if (this._CustomerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerTypeIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerTypeId = value;
					this.SendPropertyChanged("CustomerTypeId");
					this.OnCustomerTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Money NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="Customer_InvoiceHeader", Storage="_InvoiceHeaders", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<InvoiceHeader> InvoiceHeaders
		{
			get
			{
				return this._InvoiceHeaders;
			}
			set
			{
				this._InvoiceHeaders.Assign(value);
			}
		}
		
		[Association(Name="Customer_Phone", Storage="_Phones", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Phone> Phones
		{
			get
			{
				return this._Phones;
			}
			set
			{
				this._Phones.Assign(value);
			}
		}
		
		[Association(Name="Customer_Login", Storage="_Logins", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		[Association(Name="Customer_Address", Storage="_Addresses", ThisKey="Id", OtherKey="CustomerId")]
		public EntitySet<Address> Addresses
		{
			get
			{
				return this._Addresses;
			}
			set
			{
				this._Addresses.Assign(value);
			}
		}
		
		[Association(Name="CustomerType_Customer", Storage="_CustomerType", ThisKey="CustomerTypeId", OtherKey="Id", IsForeignKey=true)]
		public CustomerType CustomerType
		{
			get
			{
				return this._CustomerType.Entity;
			}
			set
			{
				CustomerType previousValue = this._CustomerType.Entity;
				if (((previousValue != value) 
							|| (this._CustomerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerType.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._CustomerType.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._CustomerTypeId = value.Id;
					}
					else
					{
						this._CustomerTypeId = default(int);
					}
					this.SendPropertyChanged("CustomerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceHeaders(InvoiceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_InvoiceHeaders(InvoiceHeader entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Phones(Phone entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Addresses(Address entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[Table(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CustomerId;
		
		private int _AddressTypeId;
		
		private string _Line1;
		
		private string _Line2;
		
		private string _City;
		
		private string _State;
		
		private string _Province;
		
		private string _ZipCode;
		
		private string _CountryCode;
		
		private System.DateTime _CreatedDate;
		
		private int _CreatedBy;
		
		private System.DateTime _LastChangedDate;
		
		private int _LastChangedBy;
		
		private bool _Deleted;
		
		private EntityRef<AddressType> _AddressType;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerIdChanging(int value);
    partial void OnCustomerIdChanged();
    partial void OnAddressTypeIdChanging(int value);
    partial void OnAddressTypeIdChanged();
    partial void OnLine1Changing(string value);
    partial void OnLine1Changed();
    partial void OnLine2Changing(string value);
    partial void OnLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnProvinceChanging(string value);
    partial void OnProvinceChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedByChanging(int value);
    partial void OnCreatedByChanged();
    partial void OnLastChangedDateChanging(System.DateTime value);
    partial void OnLastChangedDateChanged();
    partial void OnLastChangedByChanging(int value);
    partial void OnLastChangedByChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Address()
		{
			this._AddressType = default(EntityRef<AddressType>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerId", DbType="Int NOT NULL")]
		public int CustomerId
		{
			get
			{
				return this._CustomerId;
			}
			set
			{
				if ((this._CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIdChanging(value);
					this.SendPropertyChanging();
					this._CustomerId = value;
					this.SendPropertyChanged("CustomerId");
					this.OnCustomerIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressTypeId", DbType="Int NOT NULL")]
		public int AddressTypeId
		{
			get
			{
				return this._AddressTypeId;
			}
			set
			{
				if ((this._AddressTypeId != value))
				{
					if (this._AddressType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AddressTypeId = value;
					this.SendPropertyChanged("AddressTypeId");
					this.OnAddressTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_Line1", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Line1
		{
			get
			{
				return this._Line1;
			}
			set
			{
				if ((this._Line1 != value))
				{
					this.OnLine1Changing(value);
					this.SendPropertyChanging();
					this._Line1 = value;
					this.SendPropertyChanged("Line1");
					this.OnLine1Changed();
				}
			}
		}
		
		[Column(Storage="_Line2", DbType="NVarChar(100)")]
		public string Line2
		{
			get
			{
				return this._Line2;
			}
			set
			{
				if ((this._Line2 != value))
				{
					this.OnLine2Changing(value);
					this.SendPropertyChanging();
					this._Line2 = value;
					this.SendPropertyChanged("Line2");
					this.OnLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(100)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_State", DbType="NChar(5) NOT NULL", CanBeNull=false)]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[Column(Storage="_Province", DbType="NVarChar(20)")]
		public string Province
		{
			get
			{
				return this._Province;
			}
			set
			{
				if ((this._Province != value))
				{
					this.OnProvinceChanging(value);
					this.SendPropertyChanging();
					this._Province = value;
					this.SendPropertyChanged("Province");
					this.OnProvinceChanged();
				}
			}
		}
		
		[Column(Storage="_ZipCode", DbType="NVarChar(5) NOT NULL", CanBeNull=false)]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="NChar(2) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="Int NOT NULL")]
		public int CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastChangedDate
		{
			get
			{
				return this._LastChangedDate;
			}
			set
			{
				if ((this._LastChangedDate != value))
				{
					this.OnLastChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastChangedDate = value;
					this.SendPropertyChanged("LastChangedDate");
					this.OnLastChangedDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastChangedBy", DbType="Int NOT NULL")]
		public int LastChangedBy
		{
			get
			{
				return this._LastChangedBy;
			}
			set
			{
				if ((this._LastChangedBy != value))
				{
					this.OnLastChangedByChanging(value);
					this.SendPropertyChanging();
					this._LastChangedBy = value;
					this.SendPropertyChanged("LastChangedBy");
					this.OnLastChangedByChanged();
				}
			}
		}
		
		[Column(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[Association(Name="AddressType_Address", Storage="_AddressType", ThisKey="AddressTypeId", OtherKey="Id", IsForeignKey=true)]
		public AddressType AddressType
		{
			get
			{
				return this._AddressType.Entity;
			}
			set
			{
				AddressType previousValue = this._AddressType.Entity;
				if (((previousValue != value) 
							|| (this._AddressType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AddressType.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._AddressType.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._AddressTypeId = value.Id;
					}
					else
					{
						this._AddressTypeId = default(int);
					}
					this.SendPropertyChanged("AddressType");
				}
			}
		}
		
		[Association(Name="Customer_Address", Storage="_Customer", ThisKey="CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Addresses.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Addresses.Add(this);
						this._CustomerId = value.Id;
					}
					else
					{
						this._CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
